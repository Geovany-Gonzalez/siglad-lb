# =========================
# NGINX para balancear 50/50 a dos frontends en Render
# - Failover rápido: si uno cae, reintenta en el otro en la misma request
# - Cuando ambos están arriba, reparte 50/50
# =========================

events { worker_connections 1024; }

http {
    # ---- Formato de logs (ahora SÍ dentro de http) ----
    log_format main '$remote_addr - $request '
                    'status=$status rt=$request_time '
                    'upstream=$upstream_addr ust=$upstream_status '
                    'u_rt=$upstream_response_time ua="$http_user_agent"';

    # Resolver público para dominios *.onrender.com
    resolver 1.1.1.1 8.8.8.8 ipv6=off;
    resolver_timeout 5s;

    # TLS hacia los origins https:// (SNI correcto)
    proxy_ssl_server_name on;
    proxy_ssl_protocols TLSv1.2 TLSv1.3;

    # Mantener keep-alive con los origins
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    # Cabeceras hacia el origin
    proxy_set_header Host               $host;
    proxy_set_header X-Real-IP          $remote_addr;
    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  $scheme;

    # ---- Upstreams (50/50) ----
    upstream siglad_fronts {
        server siglad-proyecto.onrender.com    max_fails=1 fail_timeout=5s;
        server siglad-proyectoii.onrender.com  max_fails=1 fail_timeout=5s;
        keepalive 16;
    }

    server {
        listen 8080;
        server_name _;

        access_log /var/log/nginx/access.log main;

        # Quién atendió (texto simple)
        location = /_lb/which {
            default_type text/plain;
            return 200 $upstream_peer_name;
        }

        # Health del balanceador
        location = /_lb/health {
            default_type application/json;
            return 200 '{"ok":true}';
        }

        # Todo lo demás al pool
        location / {
            proxy_pass https://siglad_fronts;

            # Timeouts cortos para detectar caídos/dormidos
            proxy_connect_timeout 1s;
            proxy_read_timeout    5s;
            proxy_send_timeout    5s;

            # Reintenta en el otro peer si falla (hasta 2 intentos total)
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;

            proxy_no_cache     1;
            proxy_cache_bypass 1;
        }
    }
}
