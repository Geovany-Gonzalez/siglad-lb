# Un solo proceso es suficiente para el plan free
worker_processes 1;

events {
  worker_connections 1024;
}

http {
  # DNS para que NGINX resuelva los hostnames de Render
  resolver 1.1.1.1 1.0.0.1 ipv6=off valid=300s;

  # Formato de logs en JSON (útil para ver a qué backend fue cada request)
  log_format lb_json escape=json
    '{ "ts":"$time_iso8601","remote":"$remote_addr","m":"$request_method","uri":"$uri",'
    '"st":"$status","host":"$host","uback":"$target","uaddr":"$upstream_addr",'
    '"rt":"$request_time","urt":"$upstream_response_time","rid":"$request_id" }';
  access_log /dev/stdout lb_json;
  error_log  /dev/stderr warn;

  # Reparto 50/50 entre los dos frontends
  # (cambia porcentajes si querés priorizar uno)
  split_clients "${remote_addr}${request_id}" $target {
    50% "siglad-proyecto.onrender.com";
    50% "siglad-proyectoii.onrender.com";
  }

  server {
    # Render expone el contenedor en este puerto
    listen 8080;
    server_name _;

    # Endpoints de verificación rápida
    location = /_lb/health {
      add_header Content-Type application/json;
      return 200 '{"ok":true}';
    }

    # Muestra a qué hostname se envió la petición
    location = /_lb/which {
      default_type text/plain;
      return 200 "$target\n";
    }

    # Proxy de todo lo demás hacia el target elegido
    location / {
      # TLS SNI correcto hacia Render (importante con HTTPS)
      proxy_ssl_server_name on;
      proxy_ssl_name $target;

      # Host del upstream para que sirva assets absolutos bien
      proxy_set_header Host $target;

      # Encabezados comunes de proxy
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Request-ID      $request_id;

      # Reintentos si el upstream responde con 502/503/504 o hay timeout
      proxy_next_upstream error timeout http_502 http_503 http_504;
      proxy_next_upstream_tries 2;

      # Pasa al backend usando HTTPS por hostname
      proxy_pass https://$target;
    }
  }
}
