worker_processes auto;
error_log  /dev/stderr notice;
pid        off;

events { worker_connections 1024; }

http {
  log_format main
    '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent" '
    'rt=$request_time urt=$upstream_response_time ustatus=$upstream_status '
    'uaddr=$upstream_addr uhost=$host';
  access_log /dev/stdout main;

  include       mime.types;
  default_type  application/octet-stream;

  resolver 1.1.1.1 1.0.0.1 valid=300s ipv6=off;

  # Balanceo 50/50
  split_clients "${remote_addr}${request_method}${request_uri}" $backend_host {
    50% "siglad-proyecto.onrender.com";
    *   "siglad-proyectoii.onrender.com";
  }
  map $backend_host $host_hdr { default $backend_host; }

  server {
    listen 8080;

    # Headers de diagnóstico
    add_header X-LB              "siglad-nginx"          always;
    add_header X-Upstream-Host   $backend_host           always;
    add_header X-Upstream-Addr   $upstream_addr          always;
    add_header X-Upstream-Status $upstream_status        always;
    add_header X-Upstream-Time   $upstream_response_time always;

    # Endpoints de salud/diagnóstico
    location = /_lb/health { add_header Content-Type text/plain; return 200 "ok\n"; }
    location = /_lb/which  { add_header Content-Type text/plain; return 200 "$backend_host\n"; }
    location = /_lb/status { stub_status; access_log off; }

    # ========= API SIN CORS: mismo origen (usa /api en el front) =========
    location /api/ {
      # Preflight/OPTIONS rápido (por si el front manda headers custom)
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET,POST,PUT,PATCH,DELETE,OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization,Content-Type,Accept,Origin,X-Requested-With" always;
        add_header Access-Control-Max-Age 86400 always;
        return 204;
      }

      # Proxy hacia el backend elegido
      proxy_pass https://$backend_host/api/;

      proxy_set_header Host              $host_hdr;   # host del backend (Render lo necesita)
      proxy_set_header X-Forwarded-Host  $host;       # host público del LB
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;

      proxy_ssl_server_name on;
      proxy_ssl_name        $backend_host;

      proxy_next_upstream       error timeout http_500 http_502 http_503 http_504;
      proxy_next_upstream_tries 2;
      proxy_connect_timeout 5s;
      proxy_read_timeout    30s;
      proxy_send_timeout    30s;

      # Reescrituras para cookies/redirects
      proxy_cookie_domain  siglad-proyecto.onrender.com   $host;
      proxy_cookie_domain  siglad-proyectoii.onrender.com $host;
      proxy_redirect       https://siglad-proyecto.onrender.com/    /;
      proxy_redirect       https://siglad-proyectoii.onrender.com/  /;

      # (Opcional) si subes archivos grandes:
      # client_max_body_size 20m;
    }

    # ========= Front (raíz) balanceado =========
    location / {
      proxy_pass https://$backend_host/;

      proxy_set_header Host              $host_hdr;
      proxy_set_header X-Forwarded-Host  $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;

      proxy_ssl_server_name on;
      proxy_ssl_name        $backend_host;

      proxy_next_upstream       error timeout http_500 http_502 http_503 http_504;
      proxy_next_upstream_tries 2;
      proxy_connect_timeout 5s;
      proxy_read_timeout    30s;
      proxy_send_timeout    30s;

      proxy_cookie_domain  siglad-proyecto.onrender.com   $host;
      proxy_cookie_domain  siglad-proyectoii.onrender.com $host;
      proxy_redirect       https://siglad-proyecto.onrender.com/    /;
      proxy_redirect       https://siglad-proyectoii.onrender.com/  /;

      # WebSockets (si los usas)
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      map $http_upgrade $connection_upgrade { default upgrade; "" close; }
    }
  }
}
