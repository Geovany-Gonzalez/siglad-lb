# ---------- NGINX como balanceador para Render ----------

worker_processes  auto;

events {
  worker_connections  1024;
}

http {
  # ====== Logs (con backend elegido) ======
  log_format lb_json escape=json
    '{'
      '"ts":"$time_iso8601",'
      '"remote_addr":"$proxy_protocol_addr",'
      '"method":"$request_method",'
      '"uri":"$uri",'
      '"protocol":"$server_protocol",'
      '"status":"$status",'
      '"bytes":"$body_bytes_sent",'
      '"referer":"$http_referer",'
      '"user_agent":"$http_user_agent",'
      '"host":"$host",'
      '"uback":"$upstream_addr",'
      '"rt":"$request_time",'
      '"urt":"$upstream_response_time",'
      '"rid":"$request_id"'
    '}';

  access_log  /var/log/nginx/access.log  lb_json;
  error_log   /var/log/nginx/error.log   warn;

  # DNS para upstreams por nombre (Render)
  resolver 1.1.1.1 1.0.0.1 ipv6=off valid=300s;
  resolver_timeout 5s;

  # ====== Upstream 50/50 con failover rápido ======
  upstream siglad {
    # 50/50 por defecto (sin weight)
    server siglad-proyecto.onrender.com:443   max_fails=1 fail_timeout=10s;
    server siglad-proyectoii.onrender.com:443 max_fails=1 fail_timeout=10s;

    # IMPORTANTE: sin keepalive a upstream para evitar “stickiness”
    # (si lo activas, el LB reusará la misma conexión y parecerá que no rota)
    # keepalive 64;   # <- NO usar
  }

  # ====== Servidor del balanceador ======
  server {
    listen 0.0.0.0:8080;
    server_name _;

    # --- Salubridad del LB ---
    location = /_lb/health {
      default_type application/json;
      return 200 '{"ok":true}';
    }

    # --- Qué backend respondió (texto) ---
    # Este SÍ proxy para que veas alternar el backend de verdad
    location = /_lb/which {
      proxy_pass https://siglad;
      proxy_http_version 1.1;

      # TLS a upstream (Render)
      proxy_ssl_server_name on;

      # Encabezados útiles
      proxy_set_header Host            $proxy_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Request-ID    $request_id;

      default_type text/plain;
      add_header X-Backend-Addr $upstream_addr always;
      return 200 "$upstream_addr\n";
    }

    # --- Rutas de estáticos del LB (opcional) ---
    location = /_lb/status {
      stub_status;
      access_log off;
    }

    # --- Tráfico normal: balancea entre los 2 sitios ---
    location / {
      proxy_pass https://siglad;
      proxy_http_version 1.1;

      # TLS hacia Render/HTTPS upstream
      proxy_ssl_server_name on;

      # Reintento/failover si un backend falla
      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
      proxy_next_upstream_tries 2;

      # Encabezados hacia upstream
      proxy_set_header Host              $proxy_host;                  # usa host del upstream real
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Request-ID      $request_id;

      # Encabezados hacia el cliente para inspección
      add_header X-Backend-Addr $upstream_addr always;
    }
  }
}
